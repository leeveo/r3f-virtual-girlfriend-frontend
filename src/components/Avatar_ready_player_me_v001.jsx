/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";

import * as THREE from "three";
import { useChat } from "../hooks/useChat";



const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const corresponding = {
  A: "viseme_aa",
  B: "viseme_PP",
  C: "viseme_O",
  D: "viseme_I",
  E: "viseme_E",
  F: "viseme_U",
  G: "viseme_kk",
  H: "viseme_TH",
  X: "viseme_sil",
  rest: "viseme_sil"
};

let setupMode = false;

export function Avatar(props) {
  const { nodes, materials, scene } = useGLTF("/models/67f8e8881d462102daa21314.glb");
  const { animations } = useGLTF("/models/animations.glb");
  const { message, onMessagePlayed, chat } = useChat();

  const [lipsync, setLipsync] = useState();
  const [audio, setAudio] = useState();
  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);

  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name
  );

  // ✅ LOG morph targets disponibles
  useEffect(() => {
    console.log("🧪 MorphTargets:", Object.keys(nodes.Wolf3D_Avatar.morphTargetDictionary));
    console.log("🧪 MorphTargets disponibles :", Object.keys(nodes.Wolf3D_Avatar.morphTargetDictionary));

    //console.log("🧪 MorphTargets TEETH:", Object.keys(nodes.Wolf3D_Teeth.morphTargetDictionary));
  }, []);

  // ✅ Sécure fadeIn/fadeOut
  useEffect(() => {
    const currentAction = actions[animation];
    if (!currentAction) {
      console.warn(`⚠️ Animation "${animation}" non trouvée`);
      return;
    }

    currentAction.reset().fadeIn(0.5).play();
    return () => {
      if (actions[animation]) {
        actions[animation].fadeOut(0.5);
      }
    };
  }, [animation]);

  useEffect(() => {
    if (!message) {
      setAnimation("Idle");
      return;
    }

    setAnimation(message.animation);
    setFacialExpression(message.facialExpression);
    setLipsync(message.lipsync);

    const audio = new Audio("data:audio/mp3;base64," + message.audio);
    audio.play();
    setAudio(audio);
    audio.onended = onMessagePlayed;
  }, [message]);

  const lerpMorphTarget = (target, value, speed = 0.05) => {
    scene.traverse((child) => {
      if (
        child.isSkinnedMesh &&
        child.morphTargetDictionary &&
        child.name === "Wolf3D_Avatar"
      ) {
        const index = child.morphTargetDictionary[target];
        if (index !== undefined && child.morphTargetInfluences[index] !== undefined) {
          const current = child.morphTargetInfluences[index];
          const next = THREE.MathUtils.lerp(current, value, speed);
  
          // ✋ Clamp: si on est très proche de la valeur cible, on la force
          child.morphTargetInfluences[index] = Math.abs(next - value) < 0.01 ? value : next;
        }
      }
    });
  };
  

  useFrame(() => {
    if (!scene || !nodes) return;
  
    // 1. 🎭 Expressions faciales
    const morphKeys = Object.keys(nodes.Wolf3D_Avatar.morphTargetDictionary);
    const expression = facialExpressions[facialExpression] || {};
  
    morphKeys.forEach((key) => {
      if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") return;
      const val = expression[key] || 0;
      lerpMorphTarget(key, val, 0.1);
    });
  
    // 2. 👀 Eye blinking
    lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.2);
    lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.2);
  
    // 3. 👄 Lipsync
    if (setupMode || !lipsync || !audio) return;
  
    const now = audio.currentTime;
    let activeViseme = "rest";
    let intensity = 0;
  
    for (let i = 0; i < lipsync.mouthCues.length; i++) {
      const { start, end, value } = lipsync.mouthCues[i];
      if (now >= start && now <= end) {
        activeViseme = value;
        const progress = (now - start) / (end - start);
intensity = 0.5 - 0.5 * Math.cos(Math.PI * progress); // Cosine ease-in-out
        break;
      }
    }
  
    Object.values(corresponding).forEach((morph) => {
      const target = corresponding[activeViseme] === morph ? intensity : 0;
  // ✨ Boost spécifique à la bouche
  const boosted = ["viseme_aa", "viseme_O", "viseme_U", "viseme_E", "viseme_I"].includes(morph)
    ? target * 1.6 // <- augmente l'ouverture (expérimente 1.4 ~ 1.8)
    : target;

  lerpMorphTarget(morph, boosted, 0.2); // interpolation un peu plus lente que 0.9
});
  });
  
  useControls("FacialExpressions", {
    chat: button(() => chat()),
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (val) => setAnimation(val),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (val) => setFacialExpression(val),
    },
  });

  useEffect(() => {
    let timeout;
    const blinkLoop = () => {
      timeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          blinkLoop();
        }, 200);
      }, THREE.MathUtils.randInt(1500, 4000));
    };
    blinkLoop();
    return () => clearTimeout(timeout);
  }, []);

  return (
<group {...props} dispose={null} ref={group}>
  <primitive object={nodes.Hips} />
  <skinnedMesh
    name="Wolf3D_Avatar"
    geometry={nodes.Wolf3D_Avatar.geometry}
    material={materials.Wolf3D_Avatar}
    skeleton={nodes.Wolf3D_Avatar.skeleton}
    morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary}
    morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences}
  />
</group>
  );
}

useGLTF.preload("/models/67f8e8881d462102daa21314.glb")
useGLTF.preload("/models/animations.glb");